@page "/settings/charge-point-management/charge-points"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    @if (_chargePoints == null)
    {
        <MudGrid Justify="Justify.Center">
            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
        </MudGrid>
    }
    else
    {
        <MudGrid Justify="Justify.Center">
            @foreach (var chargePoint in _chargePoints)
            {
                <MudItem xs="12" md="6" lg="3">
                    <ChargePointSettingsCard Model="chargePoint" OnChargePointRemoved="OnChargePointRemoved" />
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

<MudFab Color="Color.Primary" Icon="@Icons.Filled.Add" Class="fab-button-bottom-right" OnClick="AddChargePoint" />

@code {

    [Inject] private ChargePointClient _chargePointClient { get; set; }

    private IList<ChargePointDto> _chargePoints = null;

    protected override async Task OnParametersSetAsync()
    {
        _chargePoints = (await _chargePointClient.GetAllAsync()).ToList();
    }

    private void AddChargePoint()
    {
        Random rnd = new Random((int)DateTime.Now.Ticks);
        int image = rnd.Next(1, 11);

        _chargePoints.Add(new ChargePointDto() { Image = $"{image}.jpg" });
    }

    public void OnChargePointRemoved(object target, ChargePointDto chargePoint)
    {
        _chargePoints.Remove(chargePoint);
        StateHasChanged();
    }
}