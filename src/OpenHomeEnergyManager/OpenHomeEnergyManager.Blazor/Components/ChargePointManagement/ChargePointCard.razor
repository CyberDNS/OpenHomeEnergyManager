@using OpenHomeEnergyManager.Blazor.Infrastructure.HttpClients.ChargePoints.Shared

<MudCard>
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h5">@ChargePoint.Name</MudText>
		</CardHeaderContent>
	</MudCardHeader>
	<div style="position:relative">
		<MudCardMedia Image="@($"api/Images/{ChargePoint.Image}")" Height="450" />
		@if ((_vehicle is not null) && (_vehicle.Image is not null))
		{
	  <MudPaper Elevation="3" Class="ma-2" Style="position: absolute; right: 10px; bottom: 10px; height: 100px; width: 150px; overflow: hidden" @onclick="AttributeVehicle">
	   <MudElement HtmlTag="img" src="@($"api/Images/{_vehicle.Image}")" Style="height: 100px; margin-left: 50%; transform: translateX(-50%); " />
	  </MudPaper>
		}
		else
		{
	  <MudPaper Elevation="3" Class="ma-2 d-flex justify-center align-center" Style="position: absolute; right: 10px; bottom: 10px; height: 100px; width: 150px;" @onclick="AttributeVehicle">
				@if (_vehicle is not null)
				{
		   <MudText Typo="Typo.body2">@_vehicle.Name</MudText>
				}
				else
				{
		   <MudIcon Icon="@Icons.Material.Filled.Block" Color="Color.Default" Size="Size.Large" />
				}
	  </MudPaper>
		}
 </div>
 <MudCardContent>

		@if (_vehicleNow is not null)
		{
	  <MudGrid>
	   <MudItem xs="4" Class="d-flex py-2 px-1">
		<MudPaper Class="flex-grow-1 d-flex align-center justify-center">
		 <MudGrid>
		  <MudItem xs="6" Class="d-flex justify-end align-center">
								@switch (PhaseCount)
								{
									case 2:
				   <MudIcon Icon="@Icons.Material.Filled.Filter2" Size="Size.Large" />
										break;
									case 3:
				   <MudIcon Icon="@Icons.Material.Filled.Filter3" Size="Size.Large" />
										break;
									default:
				   <MudIcon Icon="@Icons.Material.Filled.Filter1" Size="Size.Large" />
										break;
								}
		  </MudItem>
		  <MudItem xs="6" Class="d-flex justify-start align-center"><MudText Typo="Typo.h3">@Current</MudText>&nbsp;<MudText Typo="Typo.h5">A</MudText></MudItem>
		  <MudItem xs="12" Class="d-flex justify-center align-center"><MudText Typo="Typo.h4">@Power</MudText>&nbsp;<MudText Typo="Typo.h5">W</MudText></MudItem>
		 </MudGrid>
		</MudPaper>
	   </MudItem>
	   <MudItem xs="4" Class="d-flex py-2 px-1">
		<MudPaper Class="flex-grow-1">
		 <MudChart ChartType="ChartType.Line" ChartSeries="@ChargePointSeries" Width="100%" ChartOptions="_chartOptions" Class="small-power-chart"></MudChart>
		</MudPaper>
	   </MudItem>
	   <MudItem xs="4" Class="d-flex py-2 px-1">
		<MudPaper Class="flex-grow-1 d-flex justify-center align-center">
		 <MudText Typo="Typo.h4">@_vehicleNow.StateOfCharge / @_vehicleNow.ChargeLimit</MudText>&nbsp;<MudText Typo="Typo.h5">%</MudText>
		</MudPaper>
	   </MudItem>
	  </MudGrid>
		}
 </MudCardContent>
 <MudCardActions>
  <MudGrid>
   <MudItem>
	<MudButton Variant="@(IsCurrentChargeMode(ChargeModesDto.Direct) ? Variant.Filled : Variant.Outlined)" Color="Color.Secondary" OnClick="@(() => SetChargeMode(ChargeModesDto.Direct))">Direct</MudButton>
	<MudButton Variant="@(IsCurrentChargeMode(ChargeModesDto.Excess) ? Variant.Filled : Variant.Outlined)" Color="Color.Tertiary" OnClick="@(() => SetChargeMode(ChargeModesDto.Excess))">Excess</MudButton>
	<MudButton Variant="@(IsCurrentChargeMode(ChargeModesDto.Stop) ? Variant.Filled : Variant.Outlined)" Color="Color.Error" OnClick="@(() => SetChargeMode(ChargeModesDto.Stop))">Stop</MudButton>
   </MudItem>
  </MudGrid>
 </MudCardActions>
</MudCard>
