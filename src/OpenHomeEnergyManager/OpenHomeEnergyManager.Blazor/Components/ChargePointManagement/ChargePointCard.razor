@using System.Timers
<MudCard>
	<MudCardMedia Image="@($"img/EV/{ChargePoint.Image}")" Height="200" />
	<MudCardContent>
		<MudText>@ChargePoint.Name</MudText>
		<MudText>Power: @Power W</MudText>
		<MudText>Current: @Current A</MudText>
		<MudSlider @bind-Value="CurrentSet" Step="1" Min="6" Max="16" Color="Color.Info">Value: @CurrentSet.ToString()</MudSlider>
	</MudCardContent>
	<MudCardActions>
		<MudButton Variant="Variant.Text" Color="Color.Primary">Direct Charge</MudButton>
		<MudButton Variant="Variant.Text" Color="Color.Primary">More</MudButton>
	</MudCardActions>
</MudCard>


@code {
	[Parameter] public ChargePointDto ChargePoint { get; set; }

	[Inject] private ChargePointClient _chargePointClient { get; set; }

	public int Power { get; set; }
	public decimal Current { get; set; }
    public int PhaseCount { get; set; }

	private int _currentSet;
	public int CurrentSet
	{
		get { return _currentSet; }
		set
		{
			_chargePointClient.SetCurrentAsync(ChargePoint.Id, value).GetAwaiter();
			_currentSet = value;
		}
	}

	protected override void OnInitialized()
	{
		Timer timer = new Timer();
		timer.Interval = TimeSpan.FromSeconds(5).TotalMilliseconds;
		timer.Elapsed += TimerElapsed;
		timer.Enabled = true;
	}

	private void TimerElapsed(object sender, ElapsedEventArgs e)
	{
		InvokeAsync(async () => await UpdateData());
	}

	public async Task UpdateData()
	{
		var currentData = await _chargePointClient.GetCurrentDataAsync(ChargePoint.Id);
		Power = currentData.Power;
		Current = currentData.CurrentPhase1;
		PhaseCount = currentData.PhaseCount;

		StateHasChanged();
	}
}
